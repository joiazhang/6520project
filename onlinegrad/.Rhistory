# OGD
temp = my_OGD(X=X, Y=Y, lr=0.0000001, beta_0=rep(0, p), regression=F)
betahats = temp[[1]]
runtimes = temp[[2]]
bs = temp[[3]]
dim(bs)
length(bs)
bs = as.matrix(bs)
dim(bs)
dim(rowSums(betahats*X))
length(rowSums(betahats*X))
dim(as.matrix(rowSums(betahats*X)))
# classification
Z = as.matrix(rowSums(betahats*X))+bs
dim(Z)
Y_pred = 1/(1+1/exp(Z))
Y_pred
Yhat[Y_pred < 0.5] = 0
Yhat[Y_pred >= 0.5] = 1
Yhat = rep(NA, n)
Yhat[Y_pred < 0.5] = 0
Yhat[Y_pred >= 0.5] = 1
Yhat
Y
Yhat!=Y
sum(Yhat!=Y)
sum(Yhat!=Y)/n
# plot prediction or estimation error
# X: rows are observations, columns are predictors
# Y: response variable
# betahats: n x p matrix where each ith row is the coefficients for the ith iteration and the columns are predictors
# beta: true beta coefficient px1 vector
# title: string for the title of the plot
# type: "prediction" or "estimation" for prediction error or estimation error
plot_prediction_error = function(betahats, beta, X, Y, title, type, regression=T, bs) {
n = nrow(X)
p = ncol(X)
if ((type!="prediction") && (type!="estimation")) {
stop("type parameter must be 'prediction' or 'estimation'")
}
if (type=="prediction") {
if (regression) {
# prediction error
err = colSums((X%*%t(betahats) - matrix(rep(Y, n), nrow=n, ncol=n, byrow=F))^2) # row of the inside matrix is observation, column is iteration
ylab = "Prediction error"
} else {
# classification
# predict y
Z = as.matrix(rowSums(betahats*X))+bs
Y_pred = 1/(1+1/exp(Z))
Yhat = rep(NA, n)
Yhat[Y_pred < 0.5] = 0
Yhat[Y_pred >= 0.5] = 1
# predict y
err = sum(Yhat!=Y)/n
ylab = "Misclassification rate"
}
} else {
# estimation error
beta = t(beta)
beta = matrix(rep(beta, n),nrow=n, byrow=T) # row combine n number of t(beta)'s
err = sqrt(rowSums((betahats - beta)^2))
ylab = "Estimation error"
}
err = as.matrix(err)
plot(err, xlab="Iteration", ylab=ylab, main=title)
return(err)
}
#' @param Y An n x 1 vector quantitative response variable.
#' @param lr A constant that is the learning rate.
#' @param beta_0 An p x 1 vector that is the initialization for the coefficients.
#' @param regression Boolean, regression if true, else classification
#' @return List where first elemnt is an n x p matrix where each ith row is the coefficients for the ith iteration and the columns are predictors and second element is a nx1 vector of runtimes for each iteration.
#' @examples
#' my_OGD(X=X, Y=Y, lr=0.00001, beta_0=rep(0, ncol(X)))
#' my_OGD(X=X, Y=Y, lr=0.00001, beta_0=runif(ncol(X)))
#'
#' @export
my_OGD = function(X, Y, lr, beta_0, regression=T) {
n = nrow(X)
p = ncol(X)
betahats = matrix(nrow=n, ncol=p)
betahats[1, ] = beta_0
runtimes = rep(NA, n)
runtimes[1] = 0
if (regression) {
for (t in 1:(n-1)) {
start_time = Sys.time()
x_t = as.matrix(X[t, ])
beta_t = as.matrix(betahats[t, ])
y_t_hat = t(beta_t)%*%x_t
Y_t = Y[t]
d_loss = 2*beta_t%*%t(x_t)%*%x_t - 2*x_t%*%Y_t
betahats[t+1, ] = beta_t - lr*d_loss
end_time = Sys.time()
runtimes[t+1] = runtimes[t] + (end_time - start_time)
} # end for
} else {
# classification
bs = rep(NA, n) # intercept b for n iterations
bs[1] = 0
for (t in 1:(n-1)) {
start_time = Sys.time()
x_t = as.matrix(X[t, ])
beta_t = as.matrix(betahats[t, ])
Y_t = Y[t]
# predict y
Z = t(beta_t)%*%x_t+bs[t]
Y_pred = 1/(1+1/exp(Z))
# calculate gradient
d_w = (1/n)*as.numeric(Y_pred-Y_t)*x_t
d_b = (1/n)*sum(Y_pred-Y_t)
# update coefficients and intercept
betahats[t+1, ] = beta_t - lr*d_w
bs[t+1] = bs[t] - lr*d_b
end_time = Sys.time()
runtimes[t+1] = runtimes[t] + (end_time - start_time)
}
} # end else
return(list(betahats, runtimes, as.matrix(bs)))
}
runtime_df = data.frame("n"=1:n)
pred_df = data.frame("n"=1:n) # prediction error
est_df = data.frame("n"=1:n) # estimation error
# OGD
temp = my_OGD(X=X, Y=Y, lr=0.0000001, beta_0=rep(0, p), regression=F)
betahats = temp[[1]]
runtimes = temp[[2]]
bs = temp[[3]]
runtime_df$ogd = runtimes
pred_df$ogd = plot_prediction_error(betahats, beta, X, Y, title="Online gradient descent (OGD)", type="prediction", regression=F, bs=bs)
n = nrow(X)
p = ncol(X)
if ((type!="prediction") && (type!="estimation")) {
stop("type parameter must be 'prediction' or 'estimation'")
}
if (type=="prediction") {
if (regression) {
# prediction error
err = colSums((X%*%t(betahats) - matrix(rep(Y, n), nrow=n, ncol=n, byrow=F))^2) # row of the inside matrix is observation, column is iteration
ylab = "Prediction error"
} else {
# classification
# predict y
Z = as.matrix(rowSums(betahats*X))+bs
Y_pred = 1/(1+1/exp(Z))
Yhat = rep(NA, n)
Yhat[Y_pred < 0.5] = 0
Yhat[Y_pred >= 0.5] = 1
# predict y
err = sum(Yhat!=Y)/n
ylab = "Misclassification rate"
}
} else {
# estimation error
beta = t(beta)
beta = matrix(rep(beta, n),nrow=n, byrow=T) # row combine n number of t(beta)'s
err = sqrt(rowSums((betahats - beta)^2))
ylab = "Estimation error"
}
err = as.matrix(err)
plot(err, xlab="Iteration", ylab=ylab, main=title)
err
n = nrow(X)
p = ncol(X)
betahats = matrix(nrow=n, ncol=p)
betahats[1, ] = beta_0
runtimes = rep(NA, n)
runtimes[1] = 0
# classification
bs = rep(NA, n) # intercept b for n iterations
bs[1] = 0
t = 1
x_t = as.matrix(X[t, ])
beta_t = as.matrix(betahats[t, ])
Y_t = Y[t]
# predict y
Z = t(beta_t)%*%x_t+bs[t]
Y_pred = 1/(1+1/exp(Z))
Y_pred
n = nrow(X)
p = ncol(X)
betahats = matrix(nrow=n, ncol=p)
betahats[1, ] = beta_0
runtimes = rep(NA, n)
runtimes[1] = 0
beta_0
beta_0=rep(0, p)
n = nrow(X)
p = ncol(X)
betahats = matrix(nrow=n, ncol=p)
betahats[1, ] = beta_0
runtimes = rep(NA, n)
runtimes[1] = 0
# classification
bs = rep(NA, n) # intercept b for n iterations
bs[1] = 0
t
x_t = as.matrix(X[t, ])
x_t
beta_t = as.matrix(betahats[t, ])
beta_t
Y_t = Y[t]
Y_t
length(Yhat)
dim(Yhat)
?cumsum
# predict y
err = cumsum(Yhat!=Y)/n
err
plot(err)
length(err)
# plot prediction or estimation error
# X: rows are observations, columns are predictors
# Y: response variable
# betahats: n x p matrix where each ith row is the coefficients for the ith iteration and the columns are predictors
# beta: true beta coefficient px1 vector
# title: string for the title of the plot
# type: "prediction" or "estimation" for prediction error or estimation error
plot_prediction_error = function(betahats, beta, X, Y, title, type, regression=T, bs) {
n = nrow(X)
p = ncol(X)
if ((type!="prediction") && (type!="estimation")) {
stop("type parameter must be 'prediction' or 'estimation'")
}
if (type=="prediction") {
if (regression) {
# prediction error
err = colSums((X%*%t(betahats) - matrix(rep(Y, n), nrow=n, ncol=n, byrow=F))^2) # row of the inside matrix is observation, column is iteration
ylab = "Prediction error"
} else {
# classification
# predict y
Z = as.matrix(rowSums(betahats*X))+bs
Y_pred = 1/(1+1/exp(Z))
Yhat = rep(NA, n)
Yhat[Y_pred < 0.5] = 0
Yhat[Y_pred >= 0.5] = 1
# predict y
err = cumsum(Yhat!=Y)/n
ylab = "Misclassification rate"
}
} else {
# estimation error
beta = t(beta)
beta = matrix(rep(beta, n),nrow=n, byrow=T) # row combine n number of t(beta)'s
err = sqrt(rowSums((betahats - beta)^2))
ylab = "Estimation error"
}
err = as.matrix(err)
plot(err, xlab="Iteration", ylab=ylab, main=title)
return(err)
}
# logistic regression
runtime_df = data.frame("n"=1:n)
pred_df = data.frame("n"=1:n) # prediction error
est_df = data.frame("n"=1:n) # estimation error
# OGD
temp = my_OGD(X=X, Y=Y, lr=0.0000001, beta_0=rep(0, p), regression=F)
betahats = temp[[1]]
runtimes = temp[[2]]
bs = temp[[3]]
runtime_df$ogd = runtimes
pred_df$ogd = plot_prediction_error(betahats, beta, X, Y, title="Online gradient descent (OGD)", type="prediction", regression=F, bs=bs)
est_df$ogd = plot_prediction_error(betahats, beta, X, Y, title="Online gradient descent (OGD)", type="estimation")
plot_betas(betahats, beta, nonzero_indexes, nonzero=T) # nonzero indexes
plot_betas(betahats, beta, nonzero_indexes, nonzero=F) # zero indexes
matrix(c(1:25), nrow=5)
matrix(c(1:25), nrow=5)*matrix(c(1:25), nrow=5)
25^2
bs
# plot prediction or estimation error
# X: rows are observations, columns are predictors
# Y: response variable
# betahats: n x p matrix where each ith row is the coefficients for the ith iteration and the columns are predictors
# beta: true beta coefficient px1 vector
# title: string for the title of the plot
# type: "prediction" or "estimation" for prediction error or estimation error
plot_prediction_error = function(betahats, beta, X, Y, title, type, regression=T, bs) {
n = nrow(X)
p = ncol(X)
if ((type!="prediction") && (type!="estimation")) {
stop("type parameter must be 'prediction' or 'estimation'")
}
if (type=="prediction") {
if (regression) {
# prediction error
err = colSums((X%*%t(betahats) - matrix(rep(Y, n), nrow=n, ncol=n, byrow=F))^2) # row of the inside matrix is observation, column is iteration
ylab = "Prediction error"
} else {
# classification
# predict y
Z = as.matrix(rowSums(betahats*X))+bs
Y_pred = 1/(1+1/exp(Z))
Yhat = rep(NA, n)
Yhat[Y_pred < 0.5] = 1
Yhat[Y_pred >= 0.5] = 0
# predict y
err = cumsum(Yhat!=Y)/n
ylab = "Misclassification rate"
}
} else {
# estimation error
beta = t(beta)
beta = matrix(rep(beta, n),nrow=n, byrow=T) # row combine n number of t(beta)'s
err = sqrt(rowSums((betahats - beta)^2))
ylab = "Estimation error"
}
err = as.matrix(err)
plot(err, xlab="Iteration", ylab=ylab, main=title)
return(err)
}
# logistic regression
runtime_df = data.frame("n"=1:n)
pred_df = data.frame("n"=1:n) # prediction error
est_df = data.frame("n"=1:n) # estimation error
# OGD
temp = my_OGD(X=X, Y=Y, lr=0.0000001, beta_0=rep(0, p), regression=F)
betahats = temp[[1]]
runtimes = temp[[2]]
bs = temp[[3]]
runtime_df$ogd = runtimes
pred_df$ogd = plot_prediction_error(betahats, beta, X, Y, title="Online gradient descent (OGD)", type="prediction", regression=F, bs=bs)
est_df$ogd = plot_prediction_error(betahats, beta, X, Y, title="Online gradient descent (OGD)", type="estimation")
plot_betas(betahats, beta, nonzero_indexes, nonzero=T) # nonzero indexes
plot_betas(betahats, beta, nonzero_indexes, nonzero=F) # zero indexes
cumsum(Yhat!=Y)
Yhat==Y
cumsum(Yhat!=Y)/(1:n)
rep(1, n) / (1:n)
# plot prediction or estimation error
# X: rows are observations, columns are predictors
# Y: response variable
# betahats: n x p matrix where each ith row is the coefficients for the ith iteration and the columns are predictors
# beta: true beta coefficient px1 vector
# title: string for the title of the plot
# type: "prediction" or "estimation" for prediction error or estimation error
plot_prediction_error = function(betahats, beta, X, Y, title, type, regression=T, bs) {
n = nrow(X)
p = ncol(X)
if ((type!="prediction") && (type!="estimation")) {
stop("type parameter must be 'prediction' or 'estimation'")
}
if (type=="prediction") {
if (regression) {
# prediction error
err = colSums((X%*%t(betahats) - matrix(rep(Y, n), nrow=n, ncol=n, byrow=F))^2) # row of the inside matrix is observation, column is iteration
ylab = "Prediction error"
} else {
# classification
# predict y
Z = as.matrix(rowSums(betahats*X))+bs
Y_pred = 1/(1+1/exp(Z))
Yhat = rep(NA, n)
Yhat[Y_pred < 0.5] = 0
Yhat[Y_pred >= 0.5] = 1
# predict y
err = cumsum(Yhat!=Y)/(1:n)
ylab = "Misclassification rate"
}
} else {
# estimation error
beta = t(beta)
beta = matrix(rep(beta, n),nrow=n, byrow=T) # row combine n number of t(beta)'s
err = sqrt(rowSums((betahats - beta)^2))
ylab = "Estimation error"
}
err = as.matrix(err)
plot(err, xlab="Iteration", ylab=ylab, main=title)
return(err)
}
# logistic regression
runtime_df = data.frame("n"=1:n)
pred_df = data.frame("n"=1:n) # prediction error
est_df = data.frame("n"=1:n) # estimation error
# OGD
temp = my_OGD(X=X, Y=Y, lr=0.0000001, beta_0=rep(0, p), regression=F)
betahats = temp[[1]]
runtimes = temp[[2]]
bs = temp[[3]]
runtime_df$ogd = runtimes
pred_df$ogd = plot_prediction_error(betahats, beta, X, Y, title="Online gradient descent (OGD)", type="prediction", regression=F, bs=bs)
est_df$ogd = plot_prediction_error(betahats, beta, X, Y, title="Online gradient descent (OGD)", type="estimation")
plot_betas(betahats, beta, nonzero_indexes, nonzero=T) # nonzero indexes
plot_betas(betahats, beta, nonzero_indexes, nonzero=F) # zero indexes
source("~/Documents/Github/6520project/onlinegrad/R/my_OGD.R", echo=TRUE)
devtools::document()
n
p
Y_pred
Z
n = nrow(X)
p = ncol(X)
betahats = matrix(nrow=n, ncol=p)
betahats[1, ] = beta_0
g_vec = matrix(nrow=n, ncol=p) # save matrix for the gradients where each gradient g_t is the t^{th} row of the matrix
G_t = matrix(data=rep(0, p^2), nrow=p, ncol=p) # matrix that is a cumulative sum
runtimes = rep(NA, n)
runtimes[1] = 0
t
x_t = as.matrix(X[t, ])
beta_t = as.matrix(betahats[t, ])
y_t_hat = t(beta_t)%*%x_t
Y_t = Y[t]
# predict y
Z = t(beta_t)%*%x_t # omit intercept bs
dim(Z)
Y_pred = 1/(1+1/exp(Z))
dim((1/n)*as.numeric(Y_pred-Y_t)*x_t)
x_t = as.matrix(X[t, ])
beta_t = as.matrix(betahats[t, ])
y_t_hat = t(beta_t)%*%x_t
Y_t = Y[t]
# predict y
Z = t(beta_t)%*%x_t # omit intercept bs
Y_pred = 1/(1+1/exp(Z))
g_vec[t, ] = (1/n)*as.numeric(Y_pred-Y_t)*x_t
g_t = as.matrix(g_vec[t, ])
G_t = G_t + g_t%*%t(g_t)
diag_G_t = diag(diag(G_t), nrow=p, ncol=p)
#' @param Y An n x 1 vector quantitative response variable.
#' @param lr A constant that is the learning rate.
#' @param beta_0 An p x 1 vector that is the initialization for the coefficients.
#' @param full Boolean, if true uses the full G matrix for the update step, otherwise uses only the diagonal elements of G.
#' @param regression Boolean, regression if true, else classification.
#' @return List where first elemnt is an n x p matrix where each ith row is the coefficients for the ith iteration and the columns are predictors and second element is a nx1 vector of runtimes for each iteration.
#' @examples
#' my_adagrad(X=X, Y=Y, lr=0.00001, beta_0=rep(0, ncol(X)), full=T)
#' my_adagrad(X=X, Y=Y, lr=0.00001, beta_0=runif(ncol(X)), full=F)
#' @export
my_adagrad = function(X, Y, lr, beta_0, full, regression=T) {
n = nrow(X)
p = ncol(X)
betahats = matrix(nrow=n, ncol=p)
betahats[1, ] = beta_0
g_vec = matrix(nrow=n, ncol=p) # save matrix for the gradients where each gradient g_t is the t^{th} row of the matrix
G_t = matrix(data=rep(0, p^2), nrow=p, ncol=p) # matrix that is a cumulative sum
runtimes = rep(NA, n)
runtimes[1] = 0
if (regression) {
for (t in 1:(n-1)) {
start_time = Sys.time()
x_t = as.matrix(X[t, ])
beta_t = as.matrix(betahats[t, ])
y_t_hat = t(beta_t)%*%x_t
Y_t = Y[t]
g_vec[t, ] = 2*beta_t%*%t(x_t)%*%x_t - 2*x_t%*%Y_t
g_t = as.matrix(g_vec[t, ])
G_t = G_t + g_t%*%t(g_t)
diag_G_t = diag(diag(G_t), nrow=p, ncol=p)
if (full) {
# full
# betahats[t+1, ] = beta_t - lr*as.matrix(solve(as.matrix(expm::sqrtm(G_t))))%*%g_t # TODO: there is an issue here
} else {
# diagonal
betahats[t+1, ] = beta_t - lr*as.matrix(diag(diag(diag_G_t^(-1/2)), nrow=p, ncol=p))%*%g_t
}
end_time = Sys.time()
runtimes[t+1] = runtimes[t] + (end_time - start_time)
} # end for
} else {
# classification
for (t in 1:(n-1)) {
start_time = Sys.time()
x_t = as.matrix(X[t, ])
beta_t = as.matrix(betahats[t, ])
y_t_hat = t(beta_t)%*%x_t
Y_t = Y[t]
# predict y
Z = t(beta_t)%*%x_t # omit intercept bs
Y_pred = 1/(1+1/exp(Z))
g_vec[t, ] = (1/n)*as.numeric(Y_pred-Y_t)*x_t
g_t = as.matrix(g_vec[t, ])
G_t = G_t + g_t%*%t(g_t)
diag_G_t = diag(diag(G_t), nrow=p, ncol=p)
betahats[t+1, ] = beta_t - lr*as.matrix(diag(diag(diag_G_t^(-1/2)), nrow=p, ncol=p))%*%g_t # diagonal update step
end_time = Sys.time()
runtimes[t+1] = runtimes[t] + (end_time - start_time)
}
}
return(list(betahats, runtimes))
}
# Adagrad
temp = my_adagrad(X=X, Y=Y, lr=0.0000001, beta_0=rep(0, p), full=F, regression=F)
betahats = temp[[1]]
runtimes = temp[[2]]
runtime_df$adagrad = runtimes
pred_df$adagrad = plot_prediction_error(betahats, beta, X, Y, title="Adaptive gradient descent (Adagrad)", type="prediction")
est_df$adagrad = plot_prediction_error(betahats, beta, X, Y, title="Adaptive gradient descent (Adagrad)", type="estimation")
plot_betas(betahats, beta, nonzero_indexes, nonzero=T)
plot_betas(betahats, beta, nonzero_indexes, nonzero=T)
plot_betas(betahats, beta, nonzero_indexes, nonzero=F)
pred_df$adagrad = plot_prediction_error(betahats, beta, X, Y, title="Adaptive gradient descent (Adagrad)", type="prediction")
est_df$adagrad = plot_prediction_error(betahats, beta, X, Y, title="Adaptive gradient descent (Adagrad)", type="estimation")
temp = my_adagrad(X=X, Y=Y, lr=0.0000001, beta_0=rep(0, p), full=F, regression=F)
betahats = temp[[1]]
runtimes = temp[[2]]
runtime_df$adagrad = runtimes
pred_df$adagrad = plot_prediction_error(betahats, beta, X, Y, title="Adaptive gradient descent (Adagrad)", type="prediction", regression=F, bs=rep(0, p))
bs
dim(bs)
temp = my_adagrad(X=X, Y=Y, lr=0.0000001, beta_0=rep(0, p), full=F, regression=F)
betahats = temp[[1]]
runtimes = temp[[2]]
runtime_df$adagrad = runtimes
pred_df$adagrad = plot_prediction_error(betahats, beta, X, Y, title="Adaptive gradient descent (Adagrad)", type="prediction", regression=F, bs=rep(0, n))
est_df$adagrad = plot_prediction_error(betahats, beta, X, Y, title="Adaptive gradient descent (Adagrad)", type="estimation")
plot_betas(betahats, beta, nonzero_indexes, nonzero=T)
plot_betas(betahats, beta, nonzero_indexes, nonzero=F)
?my_OGD
devtools::document()
library(onlinegrad)
